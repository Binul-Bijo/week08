name: Backend CI - Test, Build and Push Images to ACR

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

env:
  # Registry host (no scheme, no trailing slash)
  REG: ${{ secrets.ACR_LOGIN_SERVER }}
  # Unique, traceable tag per run
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # ------------------------------
  # Job 1 — Test backends (quality gate)
  # ------------------------------
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  # ------------------------------
  # Job 2 — Build & push (only if tests pass)
  # ------------------------------
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to ACR using admin credentials (docker/login-action)
      - name: Docker login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Build & push product_service (traceable tag + latest)
      - name: Build and Push product_service
        run: |
          docker build \
            -t "$REG/product_service:${{ env.IMAGE_TAG }}" \
            -t "$REG/product_service:latest" \
            ./backend/product_service
          docker push "$REG/product_service:${{ env.IMAGE_TAG }}"
          docker push "$REG/product_service:latest"

      # Build & push order_service (traceable tag + latest)
      - name: Build and Push order_service
        run: |
          docker build \
            -t "$REG/order_service:${{ env.IMAGE_TAG }}" \
            -t "$REG/order_service:latest" \
            ./backend/order_service
          docker push "$REG/order_service:${{ env.IMAGE_TAG }}"
          docker push "$REG/order_service:latest"

      - name: Docker logout
        if: always()
        run: docker logout "$REG"
